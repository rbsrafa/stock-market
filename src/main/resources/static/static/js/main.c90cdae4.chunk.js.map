{"version":3,"sources":["services/simulationService.ts","components/navbar/navbar.tsx","components/simulation/simulationSettings/simulationSettings.tsx","components/relatories/relatory/relatory.tsx","components/simulation/simulationView.tsx/simulationView.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["runSimulation","_x","simulationService_runSimulation","apply","this","arguments","_callee","settings","request","res","regenerator_default","a","wrap","_context","prev","next","investorsQuantity","numberOfInvestors","companiesQuantity","numberOfCompanies","maxBudget","maxInvestorBudget","minBudget","minInvestorBudget","maxSharePrice","minSharePrice","maxAmmountShares","maxShareNumber","minAmmountShares","minShareNumber","fetch","method","headers","Content-Type","body","JSON","stringify","sent","json","abrupt","stop","getSimulations","_getSimulations","_callee2","_context2","Navbar","react_default","createElement","Fragment","className","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","Component","SimulationSettings","props","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","e","target","value","setState","_this2","htmlFor","onKeyUp","_updateState","placeholder","onClick","_handleRunClick","Relatory","showRelatories","showCWHC","showCWLC","showIWHS","showIWLS","showIWHC","showIWLC","console","log","relatory","_renderCompaniesWithHighestCapital","_renderCompaniesWithLowestCapital","_renderInvestorsWithHeighestShares","_renderInvestorsWithLowestShares","_renderInvestorsWithHeighestCompanies","_renderInvestorsWithLowestCompanies","investorWithLeastNumberOfCompanies","map","i","_this3","_renderInvestor","_this4","investorsWithHighestNumberOfShares","_this5","investorsWithLowestNumberOfShares","key","firstName","lastName","budget","numberOfShares","_timestampConverter","createdAt","updatedAt","_this6","companiesWithHighestCapital","c","_renderCompany","companyHighestCapital","_this7","companiesWithLowestCapital","companyLowestCapital","capital","name","availableShares","sharePrice","timestamp","date","split","time","concat","SimulationView","simulation","simulationId","numberOfTransactions","relatory_Relatory","App","simulations","isSimulationRunning","length","_runSimulation","navbar_Navbar","simulationSettings_SimulationSettings","_handleRunButton","role","_renderSimulations","s","simulationView_SimulationView","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c90cdae4.chunk.js","sourcesContent":[" \n export async function runSimulation(settings: any){\n  let request = {\n    investorsQuantity: settings.numberOfInvestors,\n    companiesQuantity: settings.numberOfCompanies,\n    maxBudget: settings.maxInvestorBudget,\n    minBudget: settings.minInvestorBudget,\n    maxSharePrice: settings.maxSharePrice,\n    minSharePrice: settings.minSharePrice,\n    maxAmmountShares: settings.maxShareNumber,\n    minAmmountShares: settings.minShareNumber\n  }\n\n  const res = await fetch(\n    '/api/simulation/run',\n    {\n      method: 'POST',\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(request)\n    }\n  );\n  return await res.json();\n}\n\nexport async function getSimulations() {\n  const res = await fetch(\n    '/api/simulation/relatories',\n    {\n      method: 'GET',\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }\n  );\n  return await res.json();\n}","import React, { Component } from 'react'\n\nexport default class Navbar extends Component {\n  render() {\n    return (\n      <React.Fragment>\n        <nav className=\"navbar navbar-expand-sm navbar-dark bg-dark\">\n          <a className=\"navbar-brand\" href=\"/\">Stock Market Simulator</a>\n          <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n            <span className=\"navbar-toggler-icon\"></span>\n          </button>\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n            <ul className=\"navbar-nav mr-auto\">\n              <li className=\"nav-item active\">\n                <a className=\"nav-link\" href=\"/\">Home <span className=\"sr-only\">(current)</span></a>\n              </li>\n            </ul>\n          </div>\n        </nav>\n      </React.Fragment>\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport './simulationSettings.css';\n\ninterface Props {\n  settings: Function;\n}\n\ninterface State {\n  numberOfInvestors: number | null;\n  minInvestorBudget: number | null;\n  maxInvestorBudget: number | null;\n  numberOfCompanies: number | null;\n  minShareNumber: number | null;\n  maxShareNumber: number | null;\n  minSharePrice: number | null;\n  maxSharePrice: number | null;\n}\n\nexport default class SimulationSettings extends Component<Props, State> {\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      numberOfInvestors: 100,\n      minInvestorBudget: 1000,\n      maxInvestorBudget: 10000,\n      numberOfCompanies: 100,\n      minShareNumber: 500,\n      maxShareNumber: 1000,\n      minSharePrice: 10,\n      maxSharePrice: 100\n    }\n\n  }\n\n  private _updateState(e: any) {\n    let state = this.state;\n    (state as any)[e.target.id] = e.target.value;\n    this.setState(state);\n  }\n\n  render() {\n    return (\n      <div>\n        <h5>Simulation Settings</h5>\n        <form>\n          <div className=\"form-group\">\n            <label htmlFor=\"numberOfInvestors\">Number of Investors</label>\n            <input\n              onKeyUp={(e) => this._updateState(e)}\n              type=\"text\"\n              className=\"form-control\"\n              id=\"numberOfInvestors\"\n              placeholder=\"100\" />\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"minInvestorBudget\">Min Investor Budget</label>\n            <input\n              onKeyUp={(e) => this._updateState(e)}\n              type=\"text\"\n              className=\"form-control\"\n              id=\"minInvestorBudget\"\n              placeholder=\"1000\" />\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"maxInvestorBudget\">Max Investor Budget</label>\n            <input\n              onKeyUp={(e) => this._updateState(e)}\n              type=\"text\"\n              className=\"form-control\"\n              id=\"maxInvestorBudget\"\n              placeholder=\"10000\" />\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"numberOfCompanies\">Number of Companies</label>\n            <input\n              onKeyUp={(e) => this._updateState(e)}\n              type=\"text\"\n              className=\"form-control\"\n              id=\"numberOfCompanies\"\n              placeholder=\"100\" />\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"minShareNumber\">Min Number of Shares</label>\n            <input\n              onKeyUp={(e) => this._updateState(e)}\n              type=\"text\"\n              className=\"form-control\"\n              id=\"minShareNumber\"\n              placeholder=\"500\" />\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"maxShareNumber\">Max Number of Shares</label>\n            <input\n              onKeyUp={(e) => this._updateState(e)}\n              type=\"text\"\n              className=\"form-control\"\n              id=\"maxShareNumber\"\n              placeholder=\"1000\" />\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"minSharePrice\">Min Share Price</label>\n            <input\n              onKeyUp={(e) => this._updateState(e)}\n              type=\"text\"\n              className=\"form-control\"\n              id=\"minSharePrice\"\n              placeholder=\"10\" />\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"maxSharePrice\">Max Share Price</label>\n            <input\n              onKeyUp={(e) => this._updateState(e)}\n              type=\"text\"\n              className=\"form-control\"\n              id=\"maxSharePrice\"\n              placeholder=\"100\" />\n          </div>\n          <label onClick={() => this._handleRunClick()} className=\"btn btn-sm btn-dark mt-2\">Run</label>\n        </form>\n      </div>\n    )\n\n  }\n\n  private _handleRunClick() {\n    this.props.settings(this.state);\n  }\n}\n","import React, { Component } from 'react'\nimport './relatory.css';\n\ninterface Props {\n  relatory: any;\n}\n\ninterface State {\n  showRelatories: boolean,\n  showCWHC: boolean,\n  showCWLC: boolean,\n  showIWHS: boolean,\n  showIWLS: boolean,\n  showIWHC: boolean,\n  showIWLC: boolean\n}\n\nexport default class Relatory extends Component<Props, State> {\n\n  constructor(props: Props) {\n    super(props)\n    this.state = {\n      showRelatories: false,\n      showCWHC: false,\n      showCWLC: false,\n      showIWHS: false,\n      showIWLS: false,\n      showIWHC: false,\n      showIWLC: false\n    }\n  }\n\n  componentDidMount() {\n    console.log(this.props.relatory);\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <div className='border bg-dark'>\n          <div\n            className='border bg-white hover rel'\n            onClick={() => this.setState({ showCWHC: !this.state.showCWHC })}\n          >\n            {this._renderCompaniesWithHighestCapital()}\n          </div>\n\n          <div\n            className='border bg-white hover rel'\n            onClick={() => this.setState({ showCWLC: !this.state.showCWLC })}\n          >\n            {this._renderCompaniesWithLowestCapital()}\n          </div>\n\n          <div\n            onClick={() => this.setState({ showIWHS: !this.state.showIWHS })}\n            className='border bg-white hover rel'>\n            {this._renderInvestorsWithHeighestShares()}\n          </div>\n\n          <div\n            onClick={() => this.setState({ showIWLS: !this.state.showIWLS })}\n            className='border bg-white hover rel'\n          >\n            {this._renderInvestorsWithLowestShares()}\n          </div>\n\n          <div\n            onClick={() => this.setState({ showIWHC: !this.state.showIWHC })}\n            className='border bg-white hover rel'\n          >\n            {this._renderInvestorsWithHeighestCompanies()}\n          </div>\n\n          <div\n            onClick={() => this.setState({ showIWLC: !this.state.showIWLC })}\n            className='border bg-white hover rel'\n          >\n            {this._renderInvestorsWithLowestCompanies()}\n          </div>\n        </div>\n      </React.Fragment>\n    )\n  }\n\n  private _renderInvestorsWithHeighestCompanies() {\n    return (<div>\n      <h6>Investors With Highest Number of Companies</h6>\n\n      {this.state.showIWHC ?\n        (\n          this.props.relatory.investorWithLeastNumberOfCompanies.map((i: any) => {\n            return <div>TO DO</div>\n          })\n        ) : <div></div>}\n\n    </div>);\n  }\n\n  private _renderInvestorsWithLowestCompanies() {\n    return (<div>\n      <h6>Investors With Lowest Number of Companies</h6>\n      {this.state.showIWLC ?\n        (\n          this.props.relatory.investorWithLeastNumberOfCompanies.map((i: any) => {\n            return this._renderInvestor(i);\n          })\n        ) : <div></div>}\n    </div>);\n  }\n\n  private _renderInvestorsWithHeighestShares() {\n    return (<div>\n      <h6>Investors With Highest Number of Shares</h6>\n      {this.state.showIWHS ?\n        (\n          this.props.relatory.investorsWithHighestNumberOfShares.map((i: any) => {\n            return this._renderInvestor(i);\n          })\n        ) : <div></div>}\n    </div>);\n  }\n\n  private _renderInvestorsWithLowestShares() {\n    return (<div>\n      <h6>Investors With Lowest Number of Shares</h6>\n      {this.state.showIWLS ?\n        (\n          this.props.relatory.investorsWithLowestNumberOfShares.map((i: any) => {\n            return this._renderInvestor(i)\n          })\n        ) : <div></div>}\n    </div>);\n  }\n\n  private _renderInvestor(i: any) {\n    return (<div key={i.id}>\n      <span><strong>Id:</strong> {i.id}</span><br />\n      <span><strong>Investor Type: </strong>{i.type}</span><br />\n      <span><strong>Name: </strong>{i.firstName} {i.lastName}</span><br />\n      <span><strong>Budget: </strong>€ {i.budget}</span><br />\n      <span><strong>Number of Companies: </strong>{i.numberOfCompanies}</span><br />\n      <span><strong>Number of Shares: </strong>{i.numberOfShares}</span><br />\n      <span><strong>Created at:</strong> {this._timestampConverter(i.createdAt)}</span><br />\n      <span><strong>Updated at:</strong> {this._timestampConverter(i.updatedAt)}</span><br /><br />\n    </div>);\n  }\n\n  private _renderCompaniesWithHighestCapital() {\n    return (<div>\n      <h6>Companies With Highest Capital</h6>\n      {this.state.showCWHC ?\n        (\n          this.props.relatory.companiesWithHighestCapital.map((c: any, i: any) => {\n            return this._renderCompany(c, this.props.relatory.companyHighestCapital)\n          })\n        ) : <div></div>}\n    </div>)\n  }\n\n  private _renderCompaniesWithLowestCapital() {\n    return (<div>\n      <h6>Companies With Lowest Capital</h6>\n      {this.state.showCWLC ?\n        (\n          this.props.relatory.companiesWithLowestCapital.map((c: any, i: any) => {\n            return this._renderCompany(c, this.props.relatory.companyLowestCapital)\n          })\n        ) : <div></div>}\n    </div>)\n  }\n\n  private _renderCompany(c: any, capital: any) {\n    return (<div key={c.id}>\n      <span><strong>Id:</strong> {c.id}</span><br />\n      <span><strong>Company Type: </strong>{c.type}</span><br />\n      <span><strong>Name:</strong> {c.name}</span><br />\n      <span><strong>Capital:</strong> € {capital}</span><br />\n      <span><strong>Number of Shares:</strong> {c.numberOfShares}</span><br />\n      <span><strong>Sold Shares:</strong> {c.numberOfShares - c.availableShares}</span><br />\n      <span><strong>Share Price: € </strong> {c.sharePrice}</span><br />\n      <span><strong>Created at:</strong> {this._timestampConverter(c.createdAt)}</span><br />\n      <span><strong>Updated at:</strong> {this._timestampConverter(c.updatedAt)}</span><br /><br />\n    </div>);\n  }\n\n  private _timestampConverter(timestamp: string) {\n    let date = timestamp.split('T')[0];\n    let time = timestamp.split('T')[1].split('.')[0];\n    return `${date} ${time}`;\n  }\n\n}\n","import React, { Component } from 'react';\nimport './simulationView.css';\nimport Relatory from '../../relatories/relatory/relatory';\n\ninterface Props {\n  simulation: any;\n}\n\ninterface State {\n  showRelatories: boolean\n}\n\nexport default class SimulationView extends Component<Props, State> {\n\n  constructor(props: Props) {\n    super(props)\n    this.state = {\n      showRelatories: false\n    }\n  }\n\n  render() {\n    const className = ` btn btn-lg btn${this.state.showRelatories ? '' : '-outline'}-dark w-100 hover`;\n    const simulation = this.props.simulation;\n\n    return (\n      <div className='mb-2'>\n        <div\n          onClick={() => this.setState({ showRelatories: !this.state.showRelatories })}\n          className={className}\n        >\n          <h4>Simulation {simulation.simulationId}</h4>\n          <h6>Number of Transactions: {simulation.numberOfTransactions}</h6>\n        </div>\n\n        {this.state.showRelatories ?\n          (\n            <Relatory relatory={this.props.simulation} />\n          ) : <div></div>}\n\n      </div>\n    )\n\n  }\n}\n","import React, { Component } from 'react';\nimport { runSimulation, getSimulations } from './services/simulationService';\nimport './App.css';\nimport Navbar from './components/navbar/navbar';\nimport SimulationSettings from './components/simulation/simulationSettings/simulationSettings';\nimport SimulationView from './components/simulation/simulationView.tsx/simulationView';\n\ninterface Props {\n\n}\n\ninterface State {\n  simulations: any,\n  isSimulationRunning: boolean\n}\n\nexport default class App extends Component<Props, State> {\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      simulations: null,\n      isSimulationRunning: false\n    }\n  }\n\n  async componentDidMount() {\n    const simulations = await getSimulations();\n    if (simulations.length > 0) {\n      this.setState({ simulations });\n    }\n  }\n\n  private _handleRunButton(settings: any) {\n    this.setState({ isSimulationRunning: true });\n    this._runSimulation(settings);\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <Navbar />\n        <div className=\"container-fluid\">\n          <div className=\"row hei\">\n            <div className=\"col-4 col-sm-3 col-md-3 col-lg-2  p-1\">\n              <SimulationSettings\n                settings={(settings: any) => this._handleRunButton(settings)}\n              />\n            </div>\n            <div className=\"col-8 col-sm-9 col-md-9 col-lg-10  p-1\">\n              {this.state.isSimulationRunning ?\n                (\n                  <div>\n                    <div className=\"d-flex justify-content-center margin\">\n                      <h5>Simulation running...</h5>\n                    </div>\n                    <div className=\"d-flex justify-content-center\">\n                      <div className=\"spinner-border\" role=\"status\"></div>\n                    </div>\n                  </div>\n                ) : this._renderSimulations()}\n            </div>\n          </div>\n        </div>\n      </React.Fragment>\n    );\n\n  }\n\n  private async _runSimulation(settings: any) {\n\n    await runSimulation(settings);\n\n    const simulations = await getSimulations();\n    if (simulations.length > 0) {\n      this.setState({ simulations });\n      this.setState({ isSimulationRunning: false });\n    }\n  }\n\n  private _renderSimulations() {\n    return (<div>\n\n      {\n        this.state.simulations ?\n          (\n            <div className='container'>\n              {this.state.simulations ?\n                (\n                  this.state.simulations.map((s: any, i: any) => {\n                    return <SimulationView simulation={this.state.simulations[i]} key={i} />\n                  })\n                ) : <div></div>}\n            </div>\n          ) : (\n            <div className='container'>\n              <h5 className='text-center'>No Simulations Stored</h5>\n              <p className='text-center'>Please run simulations to see their results here.</p>\n            </div>\n          )}\n    </div >)\n  }\n\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}