{"version":3,"sources":["components/navbar/navbar.tsx","components/simulation/simulationSettings/simulationSettings.tsx","components/relatories/relatory/relatory.tsx","components/simulation/simulationView.tsx/simulationView.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Navbar","react_default","a","createElement","Fragment","className","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","Component","SimulationSettings","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","numberOfInvestors","minInvestorBudget","maxInvestorBudget","numberOfCompanies","minShareNumber","maxShareNumber","minSharePrice","maxSharePrice","e","target","value","setState","_this2","htmlFor","onKeyUp","_updateState","placeholder","onClick","settings","Relatory","showRelatories","relatory","companiesWithLowestCapital","map","c","i","key","name","companyHighestCapital","numberOfShares","availableShares","sharePrice","createdAt","updatedAt","SimulationView","concat","simulation","simulationId","numberOfTransactions","relatory_Relatory","App","simulations","getSimulations","length","_runSimulation","navbar_Navbar","simulationSettings_SimulationSettings","_handleRunButton","s","simulationView_SimulationView","request","investorsQuantity","companiesQuantity","maxBudget","minBudget","maxAmmountShares","minAmmountShares","fetch","method","headers","Content-Type","body","JSON","stringify","res","console","log","json","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b8895d44.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nexport default class Navbar extends Component {\n  render() {\n    return (\n      <React.Fragment>\n        <nav className=\"navbar navbar-expand-sm navbar-dark bg-dark\">\n          <a className=\"navbar-brand\" href=\"/\">Stock Market Simulator</a>\n          <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n            <span className=\"navbar-toggler-icon\"></span>\n          </button>\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n            <ul className=\"navbar-nav mr-auto\">\n              <li className=\"nav-item active\">\n                <a className=\"nav-link\" href=\"/\">Home <span className=\"sr-only\">(current)</span></a>\n              </li>\n            </ul>\n          </div>\n        </nav>\n      </React.Fragment>\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport './simulationSettings.css';\n\ninterface Props {\n  settings: Function;\n}\n\ninterface State {\n  numberOfInvestors: number | null;\n  minInvestorBudget: number | null;\n  maxInvestorBudget: number | null;\n  numberOfCompanies: number | null;\n  minShareNumber: number | null;\n  maxShareNumber: number | null;\n  minSharePrice: number | null;\n  maxSharePrice: number | null;\n}\n\nexport default class SimulationSettings extends Component<Props, State> {\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      numberOfInvestors: 100,\n      minInvestorBudget: 1000,\n      maxInvestorBudget: 10000,\n      numberOfCompanies: 100,\n      minShareNumber: 500,\n      maxShareNumber: 1000,\n      minSharePrice: 10,\n      maxSharePrice: 100\n    }\n\n  }\n\n  private _updateState(e: any) {\n    let state = this.state;\n    (state as any)[e.target.id] = e.target.value;\n    this.setState(state);\n  }\n\n  render() {\n    return (\n      <div>\n        <h5>Simulation Settings</h5>\n        <form>\n          <div className=\"form-group\">\n            <label htmlFor=\"numberOfInvestors\">Number of Investors</label>\n            <input\n              onKeyUp={(e) => this._updateState(e)}\n              type=\"text\"\n              className=\"form-control\"\n              id=\"numberOfInvestors\"\n              placeholder=\"100\" />\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"minInvestorBudget\">Min Investor Budget</label>\n            <input\n              onKeyUp={(e) => this._updateState(e)}\n              type=\"text\"\n              className=\"form-control\"\n              id=\"minInvestorBudget\"\n              placeholder=\"1000\" />\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"maxInvestorBudget\">Max Investor Budget</label>\n            <input\n              onKeyUp={(e) => this._updateState(e)}\n              type=\"text\"\n              className=\"form-control\"\n              id=\"maxInvestorBudget\"\n              placeholder=\"10000\" />\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"numberOfCompanies\">Number of Companies</label>\n            <input\n              onKeyUp={(e) => this._updateState(e)}\n              type=\"text\"\n              className=\"form-control\"\n              id=\"numberOfCompanies\"\n              placeholder=\"100\" />\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"minShareNumber\">Min Number of Shares</label>\n            <input\n              onKeyUp={(e) => this._updateState(e)}\n              type=\"text\"\n              className=\"form-control\"\n              id=\"minShareNumber\"\n              placeholder=\"500\" />\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"maxShareNumber\">Max Number of Shares</label>\n            <input\n              onKeyUp={(e) => this._updateState(e)}\n              type=\"text\"\n              className=\"form-control\"\n              id=\"maxShareNumber\"\n              placeholder=\"1000\" />\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"minSharePrice\">Min Share Price</label>\n            <input\n              onKeyUp={(e) => this._updateState(e)}\n              type=\"text\"\n              className=\"form-control\"\n              id=\"minSharePrice\"\n              placeholder=\"10\" />\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"maxSharePrice\">Max Share Price</label>\n            <input\n              onKeyUp={(e) => this._updateState(e)}\n              type=\"text\"\n              className=\"form-control\"\n              id=\"maxSharePrice\"\n              placeholder=\"100\" />\n          </div>\n          <label onClick={() => this.props.settings(this.state)} className=\"btn btn-sm btn-primary\">Run</label>\n        </form>\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport './relatory.css';\n\ninterface Props {\n  relatory: any;\n}\n\ninterface State {\n  showRelatories: boolean\n}\n\nexport default class Relatory extends Component<Props, State> {\n\n  constructor(props: Props) {\n    super(props)\n    this.state = {\n      showRelatories: false\n    }\n  }\n\n  render() {\n    const relatory = this.props.relatory;\n    return (\n      <React.Fragment>\n\n        <div className='border'>\n          <div>\n            <h6>Company With Highest Capital</h6>\n            {relatory.companiesWithLowestCapital.map((c: any, i: any) => {\n              return (\n                <div key={i}>\n                  <p>Id: {c.id}</p>\n                  <p>{c.type}</p>\n                  <p>Name: {c.name}</p>\n                  <p>Capital: € {relatory.companyHighestCapital}</p>\n                  <p>{c.numberOfShares}</p>\n                  <p>Sold Shares: {c.numberOfShares - c.availableShares}</p>\n                  <p>{c.sharePrice}</p>\n                  <p>{c.createdAt}</p>\n                  <p>{c.updatedAt}</p>\n                </div>\n\n              );\n            })}\n          </div>\n        </div>\n\n      </React.Fragment>\n    )\n  }\n\n}\n","import React, { Component } from 'react';\nimport './simulationView.css';\nimport Relatory from '../../relatories/relatory/relatory';\n\ninterface Props {\n  simulation: any;\n}\n\ninterface State {\n  showRelatories: boolean\n}\n\nexport default class SimulationView extends Component<Props, State> {\n\n  constructor(props: Props) {\n    super(props)\n    this.state = {\n      showRelatories: false\n    }\n  }\n\n  render() {\n    const className = ` btn btn-lg btn${this.state.showRelatories ? '' : '-outline'}-dark w-100 hover`;\n\n\n    const simulation = this.props.simulation;\n    return (\n      <div className='mb-2'>\n          <div\n            onClick={() => this.setState({ showRelatories: !this.state.showRelatories })}\n            className={className}\n          >\n            <h4>Simulation id: {simulation.simulationId}</h4>\n            <h6>Number of Transactions: {simulation.numberOfTransactions}</h6>\n          </div>\n\n          {this.state.showRelatories ?\n            (\n              <Relatory relatory={this.props.simulation}/>\n            ) :\n              <div></div>\n          }\n\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react';\n\nimport './App.css';\nimport Navbar from './components/navbar/navbar';\nimport SimulationSettings from './components/simulation/simulationSettings/simulationSettings';\nimport SimulationView from './components/simulation/simulationView.tsx/simulationView';\n\ninterface Props {\n\n}\n\ninterface State {\n  settings: {\n    numberOfInvestors: number | null;\n    minInvestorBudget: number | null;\n    maxInvestorBudget: number | null;\n    numberOfCompanies: number | null;\n    minShareNumber: number | null;\n    maxShareNumber: number | null;\n    minSharePrice: number | null;\n    maxSharePrice: number | null;\n  }\n  simulations: any\n}\n\nexport default class App extends Component<Props, State> {\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      settings: {\n        numberOfInvestors: null,\n        minInvestorBudget: null,\n        maxInvestorBudget: null,\n        numberOfCompanies: null,\n        minShareNumber: null,\n        maxShareNumber: null,\n        minSharePrice: null,\n        maxSharePrice: null\n      },\n      simulations: null\n    }\n  }\n\n  async componentDidMount() {\n    const simulations = await this.getSimulations(); \n    if(simulations.length > 0){\n      this.setState({simulations});\n    }   \n  }\n\n  private _handleRunButton(settings: any){\n    this._runSimulation(settings);\n  }\n\n  render() {\n\n    return (\n      <React.Fragment>\n        <Navbar />\n        <div className=\"container-fluid\">\n          <div className=\"row hei\">\n            <div className=\"col-4 col-sm-3 col-md-3 col-lg-2  p-1\">\n              <SimulationSettings\n                settings={(settings: any) => this._handleRunButton(settings)}\n              />\n            </div>\n            <div className=\"col-8 col-sm-9 col-md-9 col-lg-10  p-1\">\n              {this.state.simulations ?\n                (\n                  <div className='container'>\n                    {this.state.simulations ?\n                      (\n                        this.state.simulations.map((s:any, i:any) => {\n                          return <SimulationView simulation={this.state.simulations[i]} key={i} />\n                        })\n                      ) : <div></div>\n                    }\n                  </div>\n                ) :\n                (\n                  <div className='container'>\n                    <h5 className='text-center'>No Simulations Stored</h5>\n                    <p>Please run simulations to see their results here.</p>\n                  </div>\n                )\n              }\n            </div>\n          </div>\n        </div>\n      </React.Fragment>\n    );\n\n  }\n\n  private async _runSimulation(settings: any) {\n    let request = {\n      investorsQuantity: settings.numberOfInvestors,\n      companiesQuantity: settings.numberOfCompanies,\n      maxBudget: settings.maxInvestorBudget,\n      minBudget: settings.minInvestorBudget,\n      maxSharePrice: settings.maxSharePrice,\n      minSharePrice: settings.minSharePrice,\n      maxAmmountShares: settings.maxShareNumber,\n      minAmmountShares: settings.minShareNumber\n    }\n    \n    const res = await fetch(\n      '/api/simulation/run',\n      {\n        method: 'POST',\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(request)\n      }\n    );\n    const simulations = await this.getSimulations(); \n    if(simulations.length > 0){\n      this.setState({simulations});\n    }\n    console.log(res);\n  }\n\n  private async getSimulations() {\n    const res = await fetch(\n      '/api/simulation/relatories',\n      {\n        method: 'GET',\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      }\n    );\n    return await res.json();\n    \n  }\n\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}