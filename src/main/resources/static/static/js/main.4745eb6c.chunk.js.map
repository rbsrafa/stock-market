{"version":3,"sources":["components/navbar/navbar.tsx","components/simulation/simulation.tsx","components/relatories/relatories.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Navbar","react_default","a","createElement","Fragment","className","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","Component","Simulation","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","numberOfInvestors","minInvestorBudget","maxInvestorBudget","numberOfCompanies","minShareNumber","maxShareNumber","minSharePrice","maxSharePrice","settings","e","target","value","setState","console","log","_this2","htmlFor","onKeyUp","_updateState","placeholder","onClick","Relatories","App","_runSimulation","request","investorsQuantity","companiesQuantity","maxBudget","minBudget","maxAmmountShares","minAmmountShares","fetch","method","headers","Content-Type","body","JSON","stringify","res","navbar_Navbar","simulation_Simulation","relatories_Relatories","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4745eb6c.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nexport default class Navbar extends Component {\n  render() {\n    return (\n      <React.Fragment>\n        <nav className=\"navbar navbar-expand-sm navbar-dark bg-dark\">\n          <a className=\"navbar-brand\" href=\"/\">Stock Market Simulator</a>\n          <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n            <span className=\"navbar-toggler-icon\"></span>\n          </button>\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n            <ul className=\"navbar-nav mr-auto\">\n              <li className=\"nav-item active\">\n                <a className=\"nav-link\" href=\"/\">Home <span className=\"sr-only\">(current)</span></a>\n              </li>\n            </ul>\n          </div>\n        </nav>\n      </React.Fragment>\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport './simulation.css';\n\ninterface Props {\n  settings: Function;\n}\n\ninterface State {\n  numberOfInvestors: number | null;\n  minInvestorBudget: number | null;\n  maxInvestorBudget: number | null;\n  numberOfCompanies: number | null;\n  minShareNumber: number | null;\n  maxShareNumber: number | null;\n  minSharePrice: number | null;\n  maxSharePrice: number | null;\n}\n\nexport default class Simulation extends Component<Props, State> {\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      numberOfInvestors: null,\n      minInvestorBudget: null,\n      maxInvestorBudget: null,\n      numberOfCompanies: null,\n      minShareNumber: null,\n      maxShareNumber: null,\n      minSharePrice: null,\n      maxSharePrice: null\n    }\n\n  }\n\n  private _handleRunSimulation() {\n    this.props.settings(this.state);\n  }\n\n  private _updateState(e: any) {\n    let state = this.state;\n    (state as any)[e.target.id] = e.target.value;\n    this.setState(state);\n    console.log(this.state);\n  }\n\n  render() {\n    return (\n      <div>\n        <h5>Simulation Settings</h5>\n        <form>\n          <div className=\"form-group\">\n            <label htmlFor=\"numberOfInvestors\">Number of Investors</label>\n            <input\n              onKeyUp={(e) => this._updateState(e)}\n              type=\"text\"\n              className=\"form-control\"\n              id=\"numberOfInvestors\"\n              placeholder=\"\" />\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"minInvestorBudget\">Min Investor Budget</label>\n            <input\n              onKeyUp={(e) => this._updateState(e)}\n              type=\"text\"\n              className=\"form-control\"\n              id=\"minInvestorBudget\"\n              placeholder=\"\" />\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"maxInvestorBudget\">Max Investor Budget</label>\n            <input\n              onKeyUp={(e) => this._updateState(e)}\n              type=\"text\"\n              className=\"form-control\"\n              id=\"maxInvestorBudget\"\n              placeholder=\"\" />\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"numberOfCompanies\">Number of Companies</label>\n            <input\n              onKeyUp={(e) => this._updateState(e)}\n              type=\"text\"\n              className=\"form-control\"\n              id=\"numberOfCompanies\"\n              placeholder=\"\" />\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"minShareNumber\">Min Number of Shares</label>\n            <input\n              onKeyUp={(e) => this._updateState(e)}\n              type=\"text\"\n              className=\"form-control\"\n              id=\"minShareNumber\"\n              placeholder=\"\" />\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"maxShareNumber\">Max Number of Shares</label>\n            <input\n              onKeyUp={(e) => this._updateState(e)}\n              type=\"text\"\n              className=\"form-control\"\n              id=\"maxShareNumber\"\n              placeholder=\"\" />\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"minSharePrice\">Min Share Price</label>\n            <input\n              onKeyUp={(e) => this._updateState(e)}\n              type=\"text\"\n              className=\"form-control\"\n              id=\"minSharePrice\"\n              placeholder=\"\" />\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"maxSharePrice\">Max Share Price</label>\n            <input\n              onKeyUp={(e) => this._updateState(e)}\n              type=\"text\"\n              className=\"form-control\"\n              id=\"maxSharePrice\"\n              placeholder=\"\" />\n          </div>\n          <label onClick={() => this.props.settings(this.state)} className=\"btn btn-sm btn-primary\">Run</label>\n        </form>\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\n\nexport default class Relatories extends Component {\n  render() {\n    return (\n      <React.Fragment>\n        <h5>Relatories</h5>\n      </React.Fragment>\n    )\n  }\n}\n","import React, { Component } from 'react';\n\nimport './App.css';\nimport Navbar from './components/navbar/navbar';\nimport Simulation from './components/simulation/simulation';\nimport Relatories from './components/relatories/relatories';\n\ninterface Props{\n\n}\n\ninterface State{\n  settings: {\n    numberOfInvestors: number | null;\n    minInvestorBudget: number | null;\n    maxInvestorBudget: number | null;\n    numberOfCompanies: number | null;\n    minShareNumber: number | null;\n    maxShareNumber: number | null;\n    minSharePrice: number | null;\n    maxSharePrice: number | null;\n  };\n  \n}\n\nexport default class App extends Component<Props, State> {\n\n  constructor(props: Props){\n    super(props);\n    this.state = {\n      settings: {\n        numberOfInvestors: null,\n        minInvestorBudget: null,\n        maxInvestorBudget: null,\n        numberOfCompanies: null,\n        minShareNumber: null,\n        maxShareNumber: null,\n        minSharePrice: null,\n        maxSharePrice: null\n      }\n      \n    }\n  }\n\n  async componentDidUpdate(){\n    if(\n      this.state.settings.numberOfInvestors &&\n      this.state.settings.minInvestorBudget &&\n      this.state.settings.maxInvestorBudget &&\n      this.state.settings.numberOfCompanies &&\n      this.state.settings.minShareNumber && \n      this.state.settings.maxShareNumber &&\n      this.state.settings.minSharePrice &&\n      this.state.settings.maxSharePrice\n    ){\n      this._runSimulation()\n    }\n  }\n\n  private async _runSimulation(){\n    let state = this.state.settings;\n    let request = {\n      investorsQuantity: state.numberOfInvestors,\n      companiesQuantity: state.numberOfCompanies,\n      maxBudget: state.maxInvestorBudget,\n      minBudget: state.minInvestorBudget,\n      maxSharePrice: state.maxSharePrice,\n      minSharePrice: state.minSharePrice,\n      maxAmmountShares: state.maxShareNumber,\n      minAmmountShares: state.minShareNumber\n    }\n\n    const res = await fetch(\n      '/api/simulation/run',\n      {\n        method: 'POST',\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(request)\n      }\n    );\n\n    console.log(res);\n  }\n\n  render() {\n\n    return (\n      <React.Fragment>\n        <Navbar />\n        <div className=\"container-fluid pt-1\">\n          <div className=\"row\">\n            <div className=\"col-4\">\n              <Simulation \n                settings={(settings: any) => this.setState({settings})}\n              />\n            </div>\n            <div className=\"col-8\">\n              <Relatories />\n            </div>\n          </div>\n        </div>\n      </React.Fragment>\n    );\n\n  }\n\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}